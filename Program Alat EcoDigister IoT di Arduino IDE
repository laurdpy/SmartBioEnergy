#include <WiFi.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// WiFi & Telegram
const char* ssid = "JUWITA"; //Nama Wifi yang akan digunakan
const char* password = "Laurensia55"; //atau masukan password Wifi yang akan dikoneksikan
String telegramBotToken = "7628970118:AAGSvVTaEM27nMTYJ-TootRpg-PZIEicCiM";
String chatID = "1277124604";

// ThingsBoard Endpoints
const char* tb_mq4 = "http://demo.thingsboard.io/api/v1/sensormq4/telemetry";
const char* tb_dht = "http://demo.thingsboard.io/api/v1/dht22sensor/telemetry";
const char* tb_ph  = "http://demo.thingsboard.io/api/v1/phsensor/telemetry";
const char* tb_press = "http://demo.thingsboard.io/api/v1/pressuresensor/telemetry";

// Pin Setup
#define MQ4_PIN      34
#define PH_PIN       32
#define PRESS_PIN    35
#define DHT_PIN      19
#define RED_LED      5
#define GREEN_LED    17
#define BLUE_LED     16
#define RELAY_PIN    4
#define BUZZER_PIN   18

// DHT Setup
#define DHTTYPE DHT22
DHT dht(DHT_PIN, DHTTYPE);

// LCD Setup
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Enum State
enum State {
  AMAN,
  WASPADA,
  BAHAYA
};
State kondisi = AMAN;

void setup() {
  Serial.begin(115200);

  // Inisialisasi LCD dan DHT
  lcd.init();
  lcd.backlight();
  dht.begin();

  // Mode Pin
  pinMode(MQ4_PIN, INPUT);
  pinMode(PH_PIN, INPUT);
  pinMode(PRESS_PIN, INPUT);
  pinMode(RED_LED, OUTPUT);
  pinMode(GREEN_LED, OUTPUT);
  pinMode(BLUE_LED, OUTPUT);
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  // Koneksi WiFi
  WiFi.begin(ssid, password);
  lcd.setCursor(0, 0);
  lcd.print("Menghubungkan WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  lcd.clear();
  lcd.print("WiFi Terhubung!");
  delay(1000);
  lcd.clear();
}

void loop() {
  int mq4_ppm = analogRead(MQ4_PIN); // Simulasi range 0–4095
  float suhu = dht.readTemperature();
  float hum = dht.readHumidity();
  float phVal = analogRead(PH_PIN) * (14.0 / 4095.0); // konversi ADC ke pH 0–14
  float pressure = analogRead(PRESS_PIN) * (25.0 / 4095.0); // konversi ADC ke kPa

  kondisi = evaluasiStatus(mq4_ppm, suhu, hum, phVal, pressure);
  kontrolSistem(kondisi, mq4_ppm, suhu, hum, phVal, pressure);
  kirimThingsBoard(mq4_ppm, suhu, hum, phVal, pressure);

  delay(10000); // 10 detik interval
}

State evaluasiStatus(int mq4, float suhu, float hum, float ph, float tekanan) {
  bool aman = (mq4 >= 800 && mq4 <= 1600) &&
              (suhu >= 35 && suhu <= 40) &&
              (hum >= 60 && hum <= 75) &&
              (ph >= 6.0 && ph <= 7.0) &&
              (tekanan >= 11 && tekanan <= 19);

  bool waspada = ((mq4 >= 600 && mq4 < 800) || (mq4 > 1600 && mq4 <= 1800)) ||
               ((suhu >= 33 && suhu < 35) || (suhu > 40 && suhu <= 41.5)) ||
               ((hum >= 55 && hum < 60) || (hum > 75 && hum <= 80)) ||
               ((ph >= 5.5 && ph < 6.0) || (ph > 7.0 && ph <= 7.5)) ||
               ((tekanan >= 9 && tekanan < 11) || (tekanan > 19 && tekanan <= 21));

  if (aman) return AMAN;
  else if (rata2) return WASPADA;
  else return BAHAYA;
}

void kontrolSistem(State state, int mq4, float suhu, float hum, float ph, float tekanan) {
  String pesan;

  switch (state) {
    case AMAN:
      setRGB(0, 0, 255);
      digitalWrite(RELAY_PIN, LOW);
      noTone(BUZZER_PIN);
      lcd.setCursor(0, 0); lcd.print("Status: AMAN     ");
      pesan = formatPesan(mq4, suhu, hum, ph, tekanan, "Sistem Beroperasi Normal dan Aman ✅");
      break;

    case WASPADA:
      setRGB(0, 255, 0);
      digitalWrite(RELAY_PIN, LOW);
      noTone(BUZZER_PIN);
      lcd.setCursor(0, 0); lcd.print("Status: RATA2    ");
      pesan = formatPesan(mq4, suhu, hum, ph, tekanan, "Sistem Beroperasi Waspada ⚠️");
      break;

    case BAHAYA:
      setRGB(255, 0, 0);
      digitalWrite(RELAY_PIN, HIGH);
      tone(BUZZER_PIN, 3000, 500);
      lcd.setCursor(0, 0); lcd.print("Status: BAHAYA   ");
      pesan = formatPesan(mq4, suhu, hum, ph, tekanan, "Sistem Beroperasi Bahaya ❌");
      break;
  }

  sendMessageToTelegram(pesan);
  lcd.setCursor(0, 1);
  lcd.print("CH4:");
  lcd.print(mq4);
  lcd.print("ppm");
}

String formatPesan(int mq4, float suhu, float hum, float ph, float tekanan, String status) {
  String pesan = "💨 Kadar CH4 (ppm) : " + String(mq4);
  pesan += "\n🌡️ Suhu  (C)  : " + String(suhu, 1);
  pesan += "\n💧 Kelembaban (%) : " + String(hum, 1);
  pesan += "\n⚗️ pH : " + String(ph, 2);
  pesan += "\n📈 Tekanan (kPa) : " + String(tekanan, 1);
  pesan += "\nStatus : " + status;
  return pesan;
}

void setRGB(int r, int g, int b) {
  analogWrite(RED_LED, r);
  analogWrite(GREEN_LED, g);
  analogWrite(BLUE_LED, b);
}

void kirimThingsBoard(int mq4, float suhu, float hum, float ph, float tekanan) {
  kirimData(tb_mq4, "{\"metana\":" + String(mq4) + "}");
  kirimData(tb_dht, "{\"suhu\":" + String(suhu) + ", \"kelembaban\":" + String(hum) + "}");
  kirimData(tb_ph, "{\"ph\":" + String(ph, 2) + "}");
  kirimData(tb_press, "{\"tekanan\":" + String(tekanan, 1) + "}");
}

void kirimData(const char* endpoint, String payload) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(endpoint);
    http.addHeader("Content-Type", "application/json");
    int response = http.POST(payload);
    if (response <= 0) Serial.println("Gagal kirim ke ThingsBoard");
    http.end();
  }
}

void sendMessageToTelegram(String message) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String url = "https://api.telegram.org/bot" + telegramBotToken +
                 "/sendMessage?chat_id=" + chatID + "&text=" + message;
    http.begin(url);
    int httpResponseCode = http.GET();
    if (httpResponseCode <= 0) {
      Serial.println("Gagal kirim ke Telegram");
    }
    http.end();
  }
}
